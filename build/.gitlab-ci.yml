stages:
  - build
  - test
  - analysis
  - deploy

# Runs Python Unit Tests
pytest-runner:
  stage: test
  image:
    name: python:latest
    entrypoint:
      - "/bin/bash"
      - "-c"
      - ln -snf /bin/bash /bin/sh && /bin/bash -c $0
  before_script:
    - echo "Installing Dependencies . . ."
    - pip install --upgrade pip
    - pip install -r ./requirements/requirements.txt
    - pip install pytest coverage httpx
  script:
    - coverage run -m pytest
    - coverage report -m
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  allow_failure: false
  only:
    - merge_requests

sast:
  stage: analysis

#code_quality:
#  stage: analysis
#  artifacts:
#    paths: [ gl-code-quality-report.json ]
#  rules:
#    - if: $CODE_QUALITY_DISABLED
#      when: never
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run code quality job in merge request pipelines
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH      # Run code quality job in pipelines on the default branch (but not in other branch pipelines)
#    - if: $CI_COMMIT_TAG                               # Run code quality job in pipelines for tags

secret_detection:
  stage: analysis

include:
  - template: Jobs/SAST.latest.gitlab-ci.yml
#  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml
